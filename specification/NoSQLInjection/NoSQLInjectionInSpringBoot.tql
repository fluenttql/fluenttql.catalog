Method source1 = new Method("catalog.NoSQLInjection.CWE943.NoSQLInjectionInSpringBoot: java.lang.String getMyInformation(java.lang.String)")
				.out().param(0);
								
Method source2 = new Method("catalog.NoSQLInjection.CWE943.NoSQLInjectionInSpringBoot: java.lang.String getMyInformationSafely(java.lang.String)")
				.out().param(0);
								
MethodSet source = new MethodSet();

/**
 * getMyInformation and getMyInformationSafely are source, since both take input from user.
 */
source.addMethod(source1)
	  .addMethod(source2);
	  
//sanitizeForMongoDB is user defined simple sanitizer for mongodb.
Method sanitizer = new Method("catalog.CWE943.NoSQLInjection.NoSQLInjectionInSpringBoot: java.lang.String sanitizeForMongoDB(java.lang.String)")
				.in().param(0)
				.out().return();

//put is a method that the data flow has to go through after sanitizer. If the data flow goes through this method before sanitizer then there will be a security vulnerability.
Method requiredPropogator = new Method("com.mongodb.BasicDBObject: com.mongodb.BasicDBObject put(java.lang.String, java.lang.String)")
							.in().param(1)
							.out().thisObject();

//find is a sink that retrieves sensitive information from mongodb.
Method sink = new Method("com.mongodb.client.MongoCollection: com.mongodb.client.FindIterable find(com.mongodb.BasicDBObject)")
			.in().param(0);
						
new TaintFlowQuery()
		.from(source)                 			//source methods
		.notThrough(sanitizer)					//sanitizer
		.through(requiredPropogator)			//requires propagator
		.to(sink)                     			//sink methods
		.report("No-SQL-Injection - CWE943!")       	//report message
		.at(1);     							/*3 means report at both source and sink location.
		 			 							 *1 means report at source location.
									 			 *2 means report at sink location. 
		 			 							 */