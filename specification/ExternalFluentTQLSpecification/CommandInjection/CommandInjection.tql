import "../Sources/ServletSources.tql";

/*
 * encodeForOS is OWASP sanitizer that encodes the string to avoid command injection. This method
 * has to be called before the requiredPropagator to avoid the security vulnerability.
 */
Method sanitizer = new Method("org.owasp.esapi.Encoder: java.lang.String encodeForOS(org.owasp.esapi.codecs.Codec, java.lang.String)")
				.in().param(1)
				.out().return();
							
/*
 * ProcessBuilder constructor should be called to run the command, but first arguments should be sanitized to 
 * avoid the security vulnerability.
 */
Method requiredPropagator = new Method("java.lang.ProcessBuilder: java.lang.ProcessBuilder ProcessBuilder(java.lang.String[])")
							.in().param(0)
							.out().thisObject();

/*
 * Sink.
 */
Method sink = new Method("java.lang.ProcessBuilder: java.lang.Process start()")
							.in().thisObject();



TaintFlowQuery myTF = new TaintFlowQuery();

myTF.from(servletSources)								//Servlet Sources in our example.
	.notThrough(sanitizer)								//Sanitizer to sanitize the user input before requiredPropagator
	.through(requiredPropagator)						//RequiredPropagator must be called, but after sanitizer is called otherwise there is a issue.
	.to(sink)											//sink that executes the command.
	.report("Command Injection - CWE77!")				//Report the given message
	.at(1);												/*3 means report at both source and sink location.
														*1 means report at source location.
										 			 	*2 means report at sink location. 
		 				 							 	*/