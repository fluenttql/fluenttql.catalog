import "../Sources/ServletSources.tql";
import "../Sinks/LdapSinks.tql";

/*
 * encodeForLDAP is OWASP sanitizer that encodes the string to avoid LDAP-injection.
 */
Method sanitizer = new Method("org.owasp.esapi.Encoder: java.lang.String encodeForLDAP(java.lang.String)")
				.in().param(0)
				.out().return();
				
new TaintFlow()
	.from(servletSources).notThrough(sanitizer)			//Taintflow starts from source that reads userSN
	.to(sinksLdapinjection)								//Both above sources reaches the same sink.
	.and()
	.from(servletSources).notThrough(sanitizer)			//Taintflow starts from source that reads password
	.to(sinksLdapinjection)								//Both above sources reaches the same sink.
	.report("LDAP-Injection CWE-90!")					//report message
	.at(3);												/*3 means report at both source and sink location.
														*1 means report at source location.
										 				*2 means report at sink location. 
		 				 								*/			