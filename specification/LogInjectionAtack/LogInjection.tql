import "../Sources/ServletSources.tql";
import "../Sinks/LogInjectionSinks.tql";

/**
 * encodeForURL is a OWASP sanitizer that encodes the URL. This encodes all the new line and carriage return,
 * therefore Log-Injection will be avoided.
 */
Method sanitizer = new Method("org.owasp.esapi.Encoder: java.lang.String encodeForURL(java.lang.String)")
				.in().param(0)
				.out().return();
				
/**
 * decodeFromURL is a OWASP de-sanitizer that decodes the URL. This decodes all the new line and carriage return,
 * therefore this method must be avoided before calling Log-Injection sinks.
 */
Method deSanitizer = new Method("org.owasp.esapi.Encoder: java.lang.String decodeFromURL(java.lang.String)")
				.in().param(0)
				.out().return();
				
TaintFlow logInjectionTaintFlow = new TaintFlow();

logInjectionTaintFlow.from(servletSources)						//Source
						.notThrough(sanitizer)					//Sanitizer
						.through(deSanitizer)					//De-sanitizer
						.to(logInjectionSinks)					//Sink
						.report("Log-Injection CWE-117!")		//Report message
						.at(3);									/*3 means report at both source and sink location.
		 				 										*1 means report at source location.
										 			 			*2 means report at sink location. 
		 				 							 			*/